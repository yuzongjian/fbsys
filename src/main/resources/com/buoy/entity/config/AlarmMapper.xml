<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.buoy.mapper.AlarmMapper" >
  <resultMap id="BaseResultMap" type="com.buoy.entity.Alarm" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="CHAR" />
    <result column="from" property="from" jdbcType="CHAR" />
    <result column="to" property="to" jdbcType="CHAR" />
    <result column="active" property="active" jdbcType="INTEGER" />
    <result column="date" property="date" jdbcType="CHAR" />
    <result column="describe" property="describe" jdbcType="CHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, type, from, to, active, date, describe
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.buoy.entity.AlarmExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from alarm
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from alarm
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from alarm
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.buoy.entity.AlarmExample" >
    delete from alarm
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.buoy.entity.Alarm" >
    insert into alarm (id, type, from, to, 
      active, date, describe)
    values (#{id,jdbcType=INTEGER}, #{type,jdbcType=CHAR}, #{from,jdbcType=CHAR}, #{to,jdbcType=CHAR}, 
      #{active,jdbcType=INTEGER}, #{date,jdbcType=CHAR}, #{describe,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.buoy.entity.Alarm" >
    insert into alarm
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="from != null" >
        from,
      </if>
      <if test="to != null" >
        to,
      </if>
      <if test="active != null" >
        active,
      </if>
      <if test="date != null" >
        date,
      </if>
      <if test="describe != null" >
        describe,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=CHAR},
      </if>
      <if test="from != null" >
        #{from,jdbcType=CHAR},
      </if>
      <if test="to != null" >
        #{to,jdbcType=CHAR},
      </if>
      <if test="active != null" >
        #{active,jdbcType=INTEGER},
      </if>
      <if test="date != null" >
        #{date,jdbcType=CHAR},
      </if>
      <if test="describe != null" >
        #{describe,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.buoy.entity.AlarmExample" resultType="java.lang.Integer" >
    select count(*) from alarm
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update alarm
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=CHAR},
      </if>
      <if test="record.from != null" >
        from = #{record.from,jdbcType=CHAR},
      </if>
      <if test="record.to != null" >
        to = #{record.to,jdbcType=CHAR},
      </if>
      <if test="record.active != null" >
        active = #{record.active,jdbcType=INTEGER},
      </if>
      <if test="record.date != null" >
        date = #{record.date,jdbcType=CHAR},
      </if>
      <if test="record.describe != null" >
        describe = #{record.describe,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update alarm
    set id = #{record.id,jdbcType=INTEGER},
      type = #{record.type,jdbcType=CHAR},
      from = #{record.from,jdbcType=CHAR},
      to = #{record.to,jdbcType=CHAR},
      active = #{record.active,jdbcType=INTEGER},
      date = #{record.date,jdbcType=CHAR},
      describe = #{record.describe,jdbcType=CHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.buoy.entity.Alarm" >
    update alarm
    <set >
      <if test="type != null" >
        type = #{type,jdbcType=CHAR},
      </if>
      <if test="from != null" >
        from = #{from,jdbcType=CHAR},
      </if>
      <if test="to != null" >
        to = #{to,jdbcType=CHAR},
      </if>
      <if test="active != null" >
        active = #{active,jdbcType=INTEGER},
      </if>
      <if test="date != null" >
        date = #{date,jdbcType=CHAR},
      </if>
      <if test="describe != null" >
        describe = #{describe,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.buoy.entity.Alarm" >
    update alarm
    set type = #{type,jdbcType=CHAR},
      from = #{from,jdbcType=CHAR},
      to = #{to,jdbcType=CHAR},
      active = #{active,jdbcType=INTEGER},
      date = #{date,jdbcType=CHAR},
      describe = #{describe,jdbcType=CHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectAll" resultMap="BaseResultMap">
  	select * from alarm order by id;
  </select>
  <update id="updateByType">
  	update alarm set 
  		active = #{alarm.active},
  		date = #{alarm.date}
  		<if test="alarm.from != null and alarm.to != null">
  			,alarm.from = #{alarm.from},alarm.to = #{alarm.to}
  		</if>
		where alarm.type = #{alarm.type};  	
  </update>
  <select id="selectByType" resultMap="BaseResultMap">
  	select * from alarm where type = #{type};
  </select>
</mapper>